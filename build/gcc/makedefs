####################################################################################################
#Copyright(c) 2016 Cedric Jimenez
#
#This file is part of lw-mqtt.
#
#lw-mqtt is free software: you can redistribute it and/or modify
#it under the terms of the GNU Lesser General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#lw-mqtt is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Lesser General Public License for more details.
#
#You should have received a copy of the GNU Lesser General Public License
#along with lw-mqtt.  If not, see <http://www.gnu.org/licenses/>.
####################################################################################################


# Check if we display full command lines
ifeq ($(DISPLAY), yes)
	DISP = 
	SILENT =
else
	DISP = @
	SILENT = -s
endif

# Check if cygwin/make is used
CYGWIN := $(findstring CYGWIN, $(shell uname))
ifeq ("$(CYGWIN)","CYGWIN")
    # Drive letter (windows cygwin only)
    DRIVE_LETTER := d
    # Root dir (absolute path)
    ROOT_DIR_ABS := $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%, $(abspath $(ROOT_DIR)))
else
    # Root dir (absolute path)
    ROOT_DIR_ABS := $(abspath $(ROOT_DIR))
endif

# Compiler output directories and libs
ifeq ($(origin BUILD_OUTPUT_DIR), undefined)
    BUILD_OUTPUT_DIR := .
else
    BUILD_OUTPUT_DIR := $(BUILD_OUTPUT_DIR)/$(PROJECT_NAME)
endif

ifeq ($(BUILD_TYPE), LIB)
	OUTPUT_NAME = $(PROJECT_NAME)$(COMP_LIB_EXTENSION)
    BIN_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/bin
    OBJ_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/obj
    CLEAN_DIRS := $(BIN_DIR) $(OBJ_DIR) $(TARGET)
    COMMON_LIBS := PROJECT_REQUIRED LIB_REQUIRED
    CLEAN_LIBS := CLEAN_PROJECT_REQUIRED CLEAN_LIB_REQUIRED
else
	ifeq ($(BUILD_TYPE), TEST)
		OUTPUT_NAME = $(PROJECT_NAME)$(COMP_EXE_EXTENSION)
		BIN_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/bin
		OBJ_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/obj
		CLEAN_DIRS = $(BIN_DIR) $(OBJ_DIR) $(TARGET) $(TEST_GEN_DIR)
		COMMON_LIBS := PROJECT_REQUIRED LIB_REQUIRED
		CLEAN_LIBS := CLEAN_PROJECT_REQUIRED CLEAN_LIB_REQUIRED
		TEST_GEN_DIR = $(SOURCE_DIR)/gen
		ifeq ("$(CYGWIN)","CYGWIN")
		    TEST_GEN_DIR_ABS = $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%,$(abspath $(TEST_GEN_DIR)))
		    TEST_HEADER_FILE_ABS = $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%,$(abspath $(TEST_HEADER_FILE)))
		    TEST_TEMPLATE_FILE_ABS = $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%,$(abspath $(TEST_TEMPLATE_FILE)))
		else
		    TEST_GEN_DIR_ABS = $(abspath $(TEST_GEN_DIR))
		    TEST_HEADER_FILE_ABS = $(abspath $(TEST_HEADER_FILE))
		    TEST_TEMPLATE_FILE_ABS = $(abspath $(TEST_TEMPLATE_FILE))
		endif
		TEST_MAIN_FILE_ABS = $(TEST_GEN_DIR_ABS)/main.cpp
		PROJECT_DEPENDENCIES := soup/cxxtest $(PROJECT_DEPENDENCIES)
		CXXTESTGEN_PATH := $(ROOT_DIR_ABS)/src/soup/cxxtest/bin
		TEST_TARGET = $(TEST_MAIN_FILE_ABS)
	else
		OUTPUT_NAME = $(PROJECT_NAME)$(COMP_EXE_EXTENSION)
		BIN_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/bin
		OBJ_DIR := $(BUILD_OUTPUT_DIR)/$(TARGET)/obj
		CLEAN_DIRS := $(BIN_DIR) $(OBJ_DIR) $(TARGET)
		COMMON_LIBS := PROJECT_REQUIRED LIB_REQUIRED
		CLEAN_LIBS := CLEAN_PROJECT_REQUIRED CLEAN_LIB_REQUIRED
	endif
endif

# Target specific definitions
include $(ROOT_DIR)/build/gcc/conf/targets/$(TARGET).target

# Sub-makefiles parameters
SUBMAKE_PARAMS = TARGET=$(TARGET)

# Project specific include directories
PROJECT_INC_DIRS := 
SOURCE_DIR_COMPLETION_ENABLED := true
include makefile.inc

# Source dirs
ifeq ("$(CYGWIN)","CYGWIN")
    SOURCE_DIR_ABS := $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%, $(abspath $(SOURCE_DIR)))
else
    $(abspath $(SOURCE_DIR))
endif
ifeq ($(SOURCE_DIR_COMPLETION_ENABLED), true)
        SOURCE_DIRS_ABS_TMP := $(foreach SOURCE_DIR, $(SOURCE_DIRS), $(SOURCE_DIR) $(SOURCE_DIR)/src $(SOURCE_DIR)/src/$(TARGET_OS))
    else
        SOURCE_DIRS_ABS_TMP := $(SOURCE_DIRS)
    endif
SOURCE_DIRS_ABS := $(foreach SOURCE_DIR, $(SOURCE_DIRS_ABS_TMP), $(patsubst /cygdrive/$(DRIVE_LETTER)%,$(DRIVE_LETTER):%, $(abspath $(SOURCE_DIR))))

# Source files
ifeq ($(origin PROJECT_SOURCE_FILES), undefined)
    SOURCE_FILES := $(TEST_MAIN_FILE_ABS) $(foreach SOURCE_DIR, $(SOURCE_DIRS_ABS), $(wildcard $(SOURCE_DIR)/*.cpp) $(wildcard $(SOURCE_DIR)/*.c) $(wildcard $(SOURCE_DIR)/*.s))
else
    SOURCE_FILES := $(TEST_MAIN_FILE_ABS) $(foreach PROJECT_SOURCE_FILE, $(PROJECT_SOURCE_FILES), $(abspath $(PROJECT_SOURCE_FILE)))
endif

# Complete source dirs with test generation dir
SOURCE_DIRS_ABS := $(SOURCE_DIRS_ABS) $(TEST_GEN_DIR_ABS)

# Object files
OBJECT_FILES_TMP1 = $(foreach SOURCE_FILE, $(SOURCE_FILES), $(OBJ_DIR)/$(notdir $(patsubst %.cpp, %.o, $(SOURCE_FILE))))
OBJECT_FILES_TMP2 = $(patsubst %.c, %.o, $(OBJECT_FILES_TMP1))
OBJECT_FILES = $(patsubst %.s, %.o, $(OBJECT_FILES_TMP2))


# Dependencies include directories
LIB_REQUIRED_INC_FILES := $(foreach PROJECT_LIB, $(PROJECT_LIBS), $(ROOT_DIR)/build/gcc/$(PROJECT_LIB)/makefile.inc)
DEPENDENCIES_INC_FILES := $(foreach PROJECT_DEPENDENCY, $(PROJECT_DEPENDENCIES), $(ROOT_DIR)/build/gcc/$(PROJECT_DEPENDENCY)/makefile.inc)
include $(DEPENDENCIES_INC_FILES) $(LIB_REQUIRED_INC_FILES)

# Include directories
REMOVE_DUPLICATES = $(if $(1), $(firstword $(1)) $(call REMOVE_DUPLICATES,$(strip $(filter-out $(firstword $(1)), $(1)))))
PROJECT_INC_DIRS := $(call REMOVE_DUPLICATES, $(PROJECT_INC_DIRS))
PROJECT_INC_DIRS_WITH_I := $(foreach PROJECT_INC_DIR, $(PROJECT_INC_DIRS), -I$(PROJECT_INC_DIR))
TARGET_INC_DIRS_WITH_I := $(foreach TARGET_INC_DIR, $(TARGET_INC_DIRS), -I$(TARGET_INC_DIR))
INC_DIRS := $(PROJECT_INC_DIRS_WITH_I)                       \
           $(TARGET_INC_DIRS_WITH_I)

# Librairies directories
LIB_DIRS := $(TARGET_LIB_DIRS)

# Librairies
PROJECT_LIBS_ABS := $(foreach PROJECT_LIB, $(PROJECT_LIBS), $(ROOT_DIR_ABS)/build/gcc/$(PROJECT_LIB)/$(TARGET)/bin/lib$(notdir $(PROJECT_LIB))$(COMP_LIB_EXTENSION))
LIBS := $(PROJECT_LIBS_ABS)  \
        $(TARGET_LIBS) \
        $(PROJECT_LIBS_ABS)  \
        $(TARGET_LIBS) \
        $(PROJECT_LIBS_ABS)  \
        $(TARGET_LIBS) \
        $(PROJECT_LIBS_ABS)  \
        $(TARGET_LIBS) \
        $(PROJECT_LIBS_ABS)  \
        $(TARGET_LIBS)

# Rules for building the source files
all: CREATE_OUT_DIRS $(TEST_TARGET) $(BIN_DIR)/$(OUTPUT_NAME) $(TARGET_EXTRA_BUILD)
	@echo "=> $(OUTPUT_NAME) build finished"
	
all+: CREATE_OUT_DIRS $(COMMON_LIBS) $(TEST_TARGET) $(BIN_DIR)/$(OUTPUT_NAME) $(TARGET_EXTRA_BUILD)
	@echo "=> $(OUTPUT_NAME) build finished"

# Common targets
.PHONY: CREATE_OUT_DIRS $(COMMON_LIBS) $(CLEAN_LIBS)

CREATE_OUT_DIRS:
	@echo "Starting $(OUTPUT_NAME) build..."
	$(DISP)mkdir -p $(BIN_DIR)
	$(DISP)mkdir -p $(OBJ_DIR)
	
# Building each required project
PROJECT_REQUIRED:
	@for PROJECT in ${PROJECT_DEPENDENCIES};                                                                               \
	do                                                                                                         \
		if [ -f $(ROOT_DIR)/build/gcc/$${PROJECT}/makefile ] ;                                            \
		then                                                                                                   \
			$(MAKE) $(SILENT) -C $(ROOT_DIR)/build/gcc/$${PROJECT}/ $(SUBMAKE_PARAMS) all; \
		fi;                                                                                                    \
	done
	
# Building each required lib
LIB_REQUIRED:
	@for PROJECT_LIB in ${PROJECT_LIBS};                                                                               \
	do                                                                                                         \
		if [ -f $(ROOT_DIR)/build/gcc/$${PROJECT_LIB}/makefile ] ;                                            \
		then                                                                                                   \
			$(MAKE) $(SILENT) -C $(ROOT_DIR)/build/gcc/$${PROJECT_LIB}/ $(SUBMAKE_PARAMS) all; \
		fi;                                                                                                    \
	done
	
# Generating the main files for the tests
$(TEST_MAIN_FILE_ABS):
	@echo "Generating main test file from $(TEST_HEADER_FILE)..."
	$(DISP)mkdir -p $(TEST_GEN_DIR)
	$(DISP)c:\Python27\python $(CXXTESTGEN_PATH)/cxxtestgen --runner=FvTestListener -o $(TEST_MAIN_FILE_ABS) --template=$(TEST_TEMPLATE_FILE_ABS) $(TEST_HEADER_FILE_ABS)


define GENERIC_RULE_TEMPLATE
$(OBJ_DIR)/%.o: $(1)/%.cpp
	@echo "Building $$(notdir $$<)..."
	$(DISP)$(CXX) $(BUILD_INPUT_CMD) $$< $(BUILD_OUTPUT_CMD) $$@ $$(CXXFLAGS) $(INC_DIRS)
$(OBJ_DIR)/%.o: $(1)/%.c
	@echo "Building $$(notdir $$<)..."
	$(DISP)$(CC) $(BUILD_INPUT_CMD) $$< $(BUILD_OUTPUT_CMD) $$@ $$(CFLAGS) $(INC_DIRS)
$(OBJ_DIR)/%.o: $(1)/%.s
	@echo "Building $$(notdir $$<)..."
	$(DISP)$(AS) $(BUILD_INPUT_CMD) $$< $(BUILD_OUTPUT_CMD) $$@ $$(ASFLAGS) $(INC_DIRS)
endef
	
$(foreach SOURCE_DIR, $(SOURCE_DIRS_ABS), $(eval $(call GENERIC_RULE_TEMPLATE,$(SOURCE_DIR))))

	
# Rules for cleaning
clean:
	@echo "Cleaning $(OUTPUT_NAME)..."
	$(DISP)rm -rf $(CLEAN_DIRS)
	@echo "Clean finished"
	
clean+: $(CLEAN_LIBS) clean


CLEAN_PROJECT_REQUIRED:
	@for PROJECT in ${PROJECT_DEPENDENCIES};                                                                               \
	do                                                                                                         \
		if [ -f $(ROOT_DIR)/build/gcc/$${PROJECT}/makefile ] ;                                            \
		then                                                                                                   \
			$(MAKE) $(SILENT) -C $(ROOT_DIR)/build/gcc/$${PROJECT}/ $(SUBMAKE_PARAMS) clean; \
		fi;                                                                                                    \
	done


CLEAN_LIB_REQUIRED:
	@for PROJECT_LIB in ${PROJECT_LIBS};                                                                               \
	do                                                                                                         \
		if [ -f $(ROOT_DIR)/build/gcc/$${PROJECT_LIB}/makefile ] ;                                            \
		then                                                                                                   \
			$(MAKE) $(SILENT) -C $(ROOT_DIR)/build/gcc/$${PROJECT_LIB}/ $(SUBMAKE_PARAMS) clean;            \
		fi;                                                                                                    \
	done

